package main

import (
	"fmt"
	"log"
	"os"
	"runtime"
)

const (
	// Version de l'OpenTelemetry Collector √† utiliser
	OTEL_VERSION = "0.128.0"

	// Nom du service sur le syst√®me
	SERVICE_NAME = "smartsentry-agent"

	// URL de base pour t√©l√©charger la configuration par d√©faut
	// REMPLACE par l'URL GitHub de ton repo une fois push√©
	CONFIG_BASE_URL = "https://raw.githubusercontent.com/Arceuid731/smartsentry-agent/main/configs"
)

func main() {
	fmt.Println("üöÄ SmartSentry Agent Installer")
	fmt.Println("Powered by OpenTelemetry Collector")
	fmt.Printf("Target OS: %s, Architecture: %s\n\n", runtime.GOOS, runtime.GOARCH)

	// V√©rifier les permissions administrateur
	if !hasAdminPrivileges() {
		log.Fatal("‚ùå Erreur : Ce programme doit √™tre ex√©cut√© avec des privil√®ges administrateur (sudo sur Linux, Administrateur sur Windows)")
	}

	// √âtape 1 : T√©l√©charger le binaire OpenTelemetry Collector
	fmt.Println("üì• T√©l√©chargement de l'OpenTelemetry Collector...")
	if err := downloadOTelCollector(); err != nil {
		log.Fatalf("‚ùå Erreur lors du t√©l√©chargement : %v", err)
	}
	fmt.Println("‚úÖ OpenTelemetry Collector t√©l√©charg√©")

	// √âtape 2 : T√©l√©charger et installer la configuration
	fmt.Println("‚öôÔ∏è  Configuration de l'agent...")
	if err := setupConfiguration(); err != nil {
		log.Fatalf("‚ùå Erreur lors de la configuration : %v", err)
	}
	fmt.Println("‚úÖ Configuration install√©e")

	// √âtape 3 : Installer et d√©marrer le service
	fmt.Println("üîß Installation du service syst√®me...")
	if err := installAndStartService(); err != nil {
		log.Fatalf("‚ùå Erreur lors de l'installation du service : %v", err)
	}
	fmt.Println("‚úÖ Service install√© et d√©marr√©")

	fmt.Println("\nüéâ Installation termin√©e avec succ√®s !")
	fmt.Printf("Le service '%s' est maintenant actif et collecte les m√©triques.\n", SERVICE_NAME)

	// Instructions sp√©cifiques √† l'OS pour v√©rifier le service
	printServiceInstructions()
}

// hasAdminPrivileges v√©rifie si le programme s'ex√©cute avec les privil√®ges administrateur
func hasAdminPrivileges() bool {
	switch runtime.GOOS {
	case "linux", "darwin":
		// Sur Linux/macOS, v√©rifier si l'utilisateur est root (UID 0)
		return os.Geteuid() == 0
	case "windows":
		// Sur Windows, cette v√©rification est plus complexe
		// Pour simplifier, on assume que si le programme arrive jusqu'ici,
		// c'est probablement OK (la v√©rification r√©elle se ferait avec l'API Windows)
		return true
	default:
		return false
	}
}

// printServiceInstructions affiche les commandes pour g√©rer le service selon l'OS
func printServiceInstructions() {
	fmt.Println("\nüìã Commandes utiles pour g√©rer le service :")

	switch runtime.GOOS {
	case "linux":
		fmt.Printf("  ‚Ä¢ Statut      : sudo systemctl status %s\n", SERVICE_NAME)
		fmt.Printf("  ‚Ä¢ Arr√™ter     : sudo systemctl stop %s\n", SERVICE_NAME)
		fmt.Printf("  ‚Ä¢ Red√©marrer  : sudo systemctl restart %s\n", SERVICE_NAME)
		fmt.Printf("  ‚Ä¢ Logs        : sudo journalctl -u %s -f\n", SERVICE_NAME)
		fmt.Printf("  ‚Ä¢ D√©sinstaller: sudo systemctl stop %s && sudo systemctl disable %s\n", SERVICE_NAME, SERVICE_NAME)
	case "windows":
		fmt.Printf("  ‚Ä¢ Statut      : sc query \"%s\"\n", SERVICE_NAME)
		fmt.Printf("  ‚Ä¢ Arr√™ter     : sc stop \"%s\"\n", SERVICE_NAME)
		fmt.Printf("  ‚Ä¢ Red√©marrer  : sc stop \"%s\" && sc start \"%s\"\n", SERVICE_NAME, SERVICE_NAME)
		fmt.Printf("  ‚Ä¢ Logs        : Check Event Viewer > Windows Logs > Application\n")
		fmt.Printf("  ‚Ä¢ D√©sinstaller: sc stop \"%s\" && sc delete \"%s\"\n", SERVICE_NAME, SERVICE_NAME)
	}
}

// installAndStartService installe et d√©marre le service selon l'OS
func installAndStartService() error {
	switch runtime.GOOS {
	case "linux":
		return installLinuxService()
	case "windows":
		return installWindowsService()
	case "darwin":
		// Sur macOS, on pourrait utiliser launchd, mais pour simplifier
		// on affiche un message pour l'instant
		fmt.Println("‚ö†Ô∏è  Sur macOS, veuillez d√©marrer manuellement l'agent :")
		fmt.Println("sudo /usr/local/bin/otelcol-contrib --config=/etc/smartsentry-agent/config.yaml")
		return nil
	default:
		return fmt.Errorf("installation de service non support√©e sur %s", runtime.GOOS)
	}
}
