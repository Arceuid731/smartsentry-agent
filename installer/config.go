package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
)

// setupConfiguration t√©l√©charge et installe la configuration de l'agent
// selon l'OS d√©tect√©, puis demande √† l'utilisateur l'adresse du Gateway
func setupConfiguration() error {
	// D√©terminer le r√©pertoire de configuration selon l'OS
	configDir, err := getConfigDirectory()
	if err != nil {
		return fmt.Errorf("impossible de d√©terminer le r√©pertoire de configuration : %w", err)
	}

	// Cr√©er le r√©pertoire de configuration s'il n'existe pas
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("impossible de cr√©er le r√©pertoire %s : %w", configDir, err)
	}

	fmt.Printf("üìÅ Configuration dans : %s\n", configDir)

	// T√©l√©charger la configuration par d√©faut selon l'OS
	configURL := getDefaultConfigURL()
	configPath := filepath.Join(configDir, "config.yaml")

	fmt.Printf("üì• T√©l√©chargement de la configuration depuis : %s\n", configURL)
	if err := downloadFile(configURL, configPath); err != nil {
		return fmt.Errorf("√©chec du t√©l√©chargement de la configuration : %w", err)
	}

	// Demander l'adresse du SmartSentry Gateway √† l'utilisateur
	gatewayURL, err := promptForGatewayURL()
	if err != nil {
		return fmt.Errorf("erreur lors de la saisie du Gateway : %w", err)
	}

	// Mettre √† jour la configuration avec l'URL du Gateway
	if err := updateConfigWithGateway(configPath, gatewayURL); err != nil {
		return fmt.Errorf("impossible de mettre √† jour la configuration : %w", err)
	}

	fmt.Println("‚úÖ Configuration mise √† jour avec succ√®s")
	return nil
}

// getConfigDirectory retourne le r√©pertoire de configuration selon l'OS
func getConfigDirectory() (string, error) {
	switch runtime.GOOS {
	case "linux", "darwin":
		return "/etc/smartsentry-agent", nil
	case "windows":
		// Sur Windows, utiliser ProgramData
		programData := os.Getenv("ProgramData")
		if programData == "" {
			return "", fmt.Errorf("variable d'environnement ProgramData non d√©finie")
		}
		return filepath.Join(programData, "SmartSentry", "Agent"), nil
	default:
		return "", fmt.Errorf("syst√®me d'exploitation non support√© : %s", runtime.GOOS)
	}
}

// getDefaultConfigURL retourne l'URL de la configuration par d√©faut selon l'OS
func getDefaultConfigURL() string {
	switch runtime.GOOS {
	case "linux", "darwin":
		return CONFIG_BASE_URL + "/linux-default-config.yaml"
	case "windows":
		return CONFIG_BASE_URL + "/windows-default-config.yaml"
	default:
		// Fallback vers Linux
		return CONFIG_BASE_URL + "/linux-default-config.yaml"
	}
}

// promptForGatewayURL demande √† l'utilisateur l'adresse de son SmartSentry Gateway
func promptForGatewayURL() (string, error) {
	fmt.Println("\nüîß Configuration du SmartSentry Gateway")
	fmt.Println("Entrez l'adresse de votre SmartSentry Gateway (ex: http://192.168.1.100:30080)")
	fmt.Println("Cette adresse correspond √† l'IP de votre cluster k3s avec le port NodePort du Gateway.")
	fmt.Print("URL du Gateway : ")

	var gatewayURL string
	_, err := fmt.Scanln(&gatewayURL)
	if err != nil {
		return "", fmt.Errorf("erreur lors de la lecture : %w", err)
	}

	// Validation basique de l'URL
	gatewayURL = strings.TrimSpace(gatewayURL)
	if gatewayURL == "" {
		return "", fmt.Errorf("l'URL du Gateway ne peut pas √™tre vide")
	}

	// Ajouter http:// si pas de sch√©ma
	if !strings.HasPrefix(gatewayURL, "http://") && !strings.HasPrefix(gatewayURL, "https://") {
		gatewayURL = "http://" + gatewayURL
	}

	fmt.Printf("‚úÖ Gateway configur√© : %s\n", gatewayURL)
	return gatewayURL, nil
}

// updateConfigWithGateway lit le fichier de config, remplace l'endpoint et le sauvegarde
func updateConfigWithGateway(configPath, gatewayURL string) error {
	// Lire le contenu du fichier
	content, err := os.ReadFile(configPath)
	if err != nil {
		return fmt.Errorf("impossible de lire %s : %w", configPath, err)
	}

	// Remplacer le placeholder par l'URL r√©elle
	// Le placeholder dans les configs par d√©faut est : REMPLACE-PAR-IP-GATEWAY:30080
	configStr := string(content)

	// Plusieurs patterns possibles selon les configs
	replacements := map[string]string{
		"http://REMPLACE-PAR-IP-GATEWAY:30080": gatewayURL,
		"REMPLACE-PAR-IP-GATEWAY:30080":        strings.TrimPrefix(strings.TrimPrefix(gatewayURL, "http://"), "https://"),
		"IPDEVOTREVMK3S:30080":                 strings.TrimPrefix(strings.TrimPrefix(gatewayURL, "http://"), "https://"),
		"httpIPDEVOTREVMK3S30080":              gatewayURL,
	}

	// Appliquer les remplacements
	for old, new := range replacements {
		configStr = strings.ReplaceAll(configStr, old, new)
	}

	// √âcrire le fichier mis √† jour
	err = os.WriteFile(configPath, []byte(configStr), 0644)
	if err != nil {
		return fmt.Errorf("impossible d'√©crire %s : %w", configPath, err)
	}

	return nil
}

// createSystemUser cr√©e un utilisateur syst√®me d√©di√© pour l'agent (Linux uniquement)
func createSystemUser() error {
	if runtime.GOOS != "linux" {
		// Sur Windows et macOS, on utilise le syst√®me de services par d√©faut
		return nil
	}

	fmt.Println("üë§ Cr√©ation de l'utilisateur syst√®me 'smartsentry'...")

	// V√©rifier si l'utilisateur existe d√©j√†
	if userExists("smartsentry") {
		fmt.Println("‚úÖ L'utilisateur 'smartsentry' existe d√©j√†")
		return nil
	}

	// Cr√©er l'utilisateur syst√®me avec un shell non-interactif
	cmd := fmt.Sprintf("useradd --system --no-create-home --shell /usr/sbin/nologin smartsentry")
	if err := runSystemCommand("bash", "-c", cmd); err != nil {
		return fmt.Errorf("impossible de cr√©er l'utilisateur syst√®me : %w", err)
	}

	fmt.Println("‚úÖ Utilisateur 'smartsentry' cr√©√© avec succ√®s")
	return nil
}

// userExists v√©rifie si un utilisateur syst√®me existe
func userExists(username string) bool {
	cmd := fmt.Sprintf("id %s", username)
	err := runSystemCommand("bash", "-c", cmd)
	return err == nil // Si la commande r√©ussit, l'utilisateur existe
}

// createLogDirectory cr√©e le r√©pertoire de logs avec les bonnes permissions
func createLogDirectory() error {
	var logDir string

	switch runtime.GOOS {
	case "linux":
		logDir = "/var/log/smartsentry-agent"
	case "windows":
		programData := os.Getenv("ProgramData")
		if programData == "" {
			return fmt.Errorf("variable ProgramData non d√©finie")
		}
		logDir = filepath.Join(programData, "SmartSentry", "Agent", "Logs")
	case "darwin":
		logDir = "/var/log/smartsentry-agent"
	default:
		return fmt.Errorf("OS non support√© pour les logs : %s", runtime.GOOS)
	}

	fmt.Printf("üìù Cr√©ation du r√©pertoire de logs : %s\n", logDir)

	// Cr√©er le r√©pertoire avec les bonnes permissions
	if err := os.MkdirAll(logDir, 0755); err != nil {
		return fmt.Errorf("impossible de cr√©er %s : %w", logDir, err)
	}

	// Sur Linux, changer le propri√©taire vers l'utilisateur smartsentry
	if runtime.GOOS == "linux" {
		cmd := fmt.Sprintf("chown smartsentry:smartsentry %s", logDir)
		if err := runSystemCommand("bash", "-c", cmd); err != nil {
			fmt.Printf("‚ö†Ô∏è  Attention : impossible de changer le propri√©taire de %s : %v\n", logDir, err)
		}
	}

	return nil
}

// runSystemCommand ex√©cute une commande syst√®me et affiche l'erreur si √©chec
func runSystemCommand(name string, args ...string) error {
	cmd := exec.Command(name, args...)
	output, err := cmd.CombinedOutput()
	if err != nil {
		if len(output) > 0 {
			fmt.Printf("Erreur commande '%s %s': %s\n", name, strings.Join(args, " "), string(output))
		}
		return fmt.Errorf("commande '%s %s' √©chou√©e : %w", name, strings.Join(args, " "), err)
	}
	return nil
}
